// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                Int            @id @default(autoincrement())
  email             String?        @unique //나중에 이메일 받게 되면 다시 수정
  username          String?
  profile           Profile[]
  refreshTokens     RefreshToken[]
  kakaoId           BigInt?        @unique // 카카오 ID 추가
  kakaoAccessToken  String? // 카카오 액세스 토큰 추가
  kakaoRefreshToken String? // 카카오 리프레시 토큰 추가
  policies          PolicyOnUsers[] 
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      user     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id              Int    @id @default(autoincrement())
  user            user?  @relation(fields: [userId], references: [id])
  name String //프로필 이름
  userId          Int?
  region          String
  gender          String
  occupation      String
  householdSize   Int
  householdIncome Int
  targetFeature   String
}

model Policy {
  serviceID             String @id @default(cuid())
  supportType           String
  serviceName           String
  servicePurpose        String
  applicationDeadline   String
  supportTarget         String
  selectionCriteria     String
  supportDetails        String
  applicationMethod     String
  requiredDocuments     String
  receptionAgencyName   String
  contactInfo           String
  onlineApplicationURL  String
  lastModified          String
  responsibleAgencyName String
  administrativeRules   String
  autonomousRegulations String
  laws                  String
  users                 PolicyOnUsers[]
}

model PolicyOnUsers {
  userId   Int
  policyId String
  user     user   @relation(fields: [userId], references: [id])
  policy   Policy @relation(fields: [policyId], references: [serviceID])
  @@id([userId, policyId])
}